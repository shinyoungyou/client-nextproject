{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport instance from '.';\nimport { addPostToMe, removePostToMe } from \"../reducers/user\";\nimport { getDummyPosts, postMyDummyPost, postMyDummyComment } from '../reducers/post';\nexport const loadPosts = createAsyncThunk('post/loadPosts', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.post('post/', payload);\n    // return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n    return thunkAPI.fulfillWithValue(getDummyPosts(10)); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const addPost = createAsyncThunk('post/addPost', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.post('post/', payload);\n    thunkAPI.dispatch(addPostToMe(response.data.id));\n    // return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n    return thunkAPI.fulfillWithValue(postMyDummyPost(action.data, id)); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const removePost = createAsyncThunk('post/removePost', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.delete(`post/${payload.id}`);\n    thunkAPI.dispatch(removePostToMe(response.data.id));\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const addComment = createAsyncThunk('post/addComment', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.post(`post/${payload.postId}/comment/`, payload);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const removeComment = createAsyncThunk('post/removeComment', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.delete(`post/${payload.postId}/comment/${payload.id}`);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const likePost = createAsyncThunk('post/likePost', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.post(`post/${payload.postId}/like`, payload);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const unlikePost = createAsyncThunk('post/unlikePost', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.delete(`post/${payload.postId}/like/${payload.id}`);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});","map":{"version":3,"names":["createAsyncThunk","instance","addPostToMe","removePostToMe","getDummyPosts","postMyDummyPost","postMyDummyComment","loadPosts","payload","thunkAPI","response","post","fulfillWithValue","error","rejectWithValue","data","addPost","dispatch","id","action","removePost","delete","addComment","postId","removeComment","likePost","unlikePost"],"sources":["/Users/home/Desktop/new-projects/client-nextproject/store/thunks/post.js"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport instance from '.';\nimport { addPostToMe, removePostToMe } from \"../reducers/user\";\nimport { getDummyPosts, postMyDummyPost, postMyDummyComment } from '../reducers/post';\n\nexport const loadPosts = createAsyncThunk('post/loadPosts', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.post('post/', payload);\n    // return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n    return thunkAPI.fulfillWithValue(getDummyPosts(10)); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const addPost = createAsyncThunk('post/addPost', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.post('post/', payload);\n    thunkAPI.dispatch(addPostToMe(response.data.id));\n    // return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n    return thunkAPI.fulfillWithValue( postMyDummyPost(action.data, id)); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const removePost = createAsyncThunk('post/removePost', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.delete(`post/${payload.id}`);\n    thunkAPI.dispatch(removePostToMe(response.data.id));\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const addComment = createAsyncThunk('post/addComment', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.post(`post/${payload.postId}/comment/`, payload);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const removeComment = createAsyncThunk('post/removeComment', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.delete(`post/${payload.postId}/comment/${payload.id}`);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const likePost = createAsyncThunk('post/likePost', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.post(`post/${payload.postId}/like`, payload);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const unlikePost = createAsyncThunk('post/unlikePost', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.delete(`post/${payload.postId}/like/${payload.id}`);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})"],"mappings":"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"},"metadata":{},"sourceType":"module"}