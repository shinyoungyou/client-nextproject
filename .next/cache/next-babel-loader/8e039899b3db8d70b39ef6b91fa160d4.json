{"ast":null,"code":"var __jsx = React.createElement;\nimport wrapper from '../store';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loadMyInfo } from \"../store/thunks/user\";\nimport { loadPosts } from \"../store/thunks/post\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nconst Home = () => {\n  const {\n    my\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    loadPostsLoading,\n    bringMorePosts\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const {\n    0: prevLastId,\n    1: setPrevLastId\n  } = useState(-1);\n\n  // useEffect(()=>{\n  //   if(mainPosts.length < 10){\n  //     dispatch(loadMyInfo());\n  //     dispatch(loadPosts());\n  //   }\n  //   console.log(\"loadPosts\")\n  // }, [])\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (!loadPostsLoading && bringMorePosts) {\n          var _mainPosts, _mainPosts3;\n          if (prevLastId != ((_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id)) {\n            var _mainPosts2;\n            dispatch(loadPosts({\n              lastId: (_mainPosts2 = mainPosts[mainPosts.length - 1]) === null || _mainPosts2 === void 0 ? void 0 : _mainPosts2.id\n            }));\n          }\n          setPrevLastId((_mainPosts3 = mainPosts[mainPosts.length - 1]) === null || _mainPosts3 === void 0 ? void 0 : _mainPosts3.id);\n        }\n      }\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [loadPostsLoading, bringMorePosts]);\n  return __jsx(AppLayout, null, my !== null && __jsx(PostForm, null), mainPosts.map(post => post.Retweet ? __jsx(PostCard, {\n    post: post.Retweet,\n    posts: mainPosts,\n    retweetingPostId: post.id,\n    key: post.id\n  }) : __jsx(PostCard, {\n    post: post,\n    posts: mainPosts,\n    retweetingPostId: null,\n    key: post.id\n  })));\n};\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n  if (cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n  await context.store.dispatch(loadMyInfo());\n  await context.store.dispatch(loadPosts({}));\n  // console.log(context.req);\n});\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}