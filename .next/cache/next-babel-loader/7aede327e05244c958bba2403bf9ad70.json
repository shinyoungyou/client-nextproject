{"ast":null,"code":"var __jsx = React.createElement;\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addPost, uploadImages } from '../store/thunks/post';\nimport React, { useState, useEffect } from 'react';\nimport { Box, IconButton, Textarea, Typography } from '@mui/joy';\nimport ImageOutlinedIcon from '@mui/icons-material/ImageOutlined';\nimport ImageList from '@mui/material/ImageList';\nimport ImageListItem from '@mui/material/ImageListItem';\nimport Tooltip from '@mui/material/Tooltip';\nimport ClearRoundedIcon from '@mui/icons-material/ClearRounded';\nimport { LoadingButton } from '@mui/lab';\nconst PostForm = () => {\n  const {\n    imagePaths,\n    addPostLoading,\n    addPostDone\n  } = useSelector(state => state.post);\n  const {\n    my\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const {\n    0: images,\n    1: setImages\n  } = useState([]);\n  useEffect(() => {\n    if (imagePaths.length > 0) {\n      dispatch(addPost({\n        content: text,\n        images: imagePaths\n      }));\n    }\n  }, [imagePaths]);\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n      setImages([]);\n    }\n  }, [addPostDone]);\n  useEffect(() => {\n    console.log(images);\n  }, [images]);\n  const addEmoji = emoji => () => setText(`${text}${emoji}`);\n  const handleChangeImagePreview = e => {\n    const {\n      files\n    } = e.target;\n    if (files) {\n      for (let i = 0; (files === null || files === void 0 ? void 0 : files.length) > i; i++) {\n        const file = files[i];\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          setImages(prev => [...prev, {\n            src: reader.result,\n            file\n          }]);\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  };\n  const handleRemoveImagePreview = lastModified => {\n    setImages(prev => prev.filter(image => {\n      var _image$file;\n      return lastModified !== ((_image$file = image.file) === null || _image$file === void 0 ? void 0 : _image$file.lastModified);\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!text && images.length == 0) return alert('게시글을 작성하세요.');\n    if (text && images.length == 0) return dispatch(addPost({\n      content: text\n    }));\n    const formData = new FormData();\n    images.forEach(image => {\n      formData.append('image', image.file);\n    });\n    dispatch(uploadImages(formData));\n  };\n  return __jsx(Box, {\n    sx: {\n      m: 1\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    encType: \"multipart/form-data\"\n  }, __jsx(Textarea, {\n    placeholder: \"Type in here\\u2026\",\n    value: text,\n    onChange: event => setText(event.target.value),\n    minRows: 2,\n    maxRows: 4,\n    startDecorator: __jsx(Box, {\n      sx: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'center'\n      }\n    }, __jsx(Box, {\n      sx: {\n        display: 'flex',\n        gap: 0.5\n      }\n    }, __jsx(Tooltip, {\n      title: \"Media\",\n      placement: \"top\"\n    }, __jsx(IconButton, {\n      variant: \"outlined\",\n      sx: {\n        borderColor: '#D8D8DF'\n      },\n      color: \"neutral\",\n      \"aria-label\": \"upload picture\",\n      component: \"label\"\n    }, __jsx(\"input\", {\n      hidden: true,\n      accept: \"image/*\",\n      multiple: true,\n      type: \"file\",\n      onChange: handleChangeImagePreview\n    }), __jsx(ImageOutlinedIcon, {\n      color: \"primary\"\n    }))), __jsx(Tooltip, {\n      title: \"Good\",\n      placement: \"top\"\n    }, __jsx(IconButton, {\n      variant: \"outlined\",\n      sx: {\n        borderColor: '#D8D8DF'\n      },\n      color: \"neutral\",\n      onClick: addEmoji('👍')\n    }, \"\\uD83D\\uDC4D\")), __jsx(Tooltip, {\n      title: \"Summer\",\n      placement: \"top\"\n    }, __jsx(IconButton, {\n      variant: \"outlined\",\n      sx: {\n        borderColor: '#D8D8DF'\n      },\n      color: \"neutral\",\n      onClick: addEmoji('🏖')\n    }, \"\\uD83C\\uDFD6\")), __jsx(Tooltip, {\n      title: \"Love\",\n      placement: \"top\"\n    }, __jsx(IconButton, {\n      variant: \"outlined\",\n      sx: {\n        borderColor: '#D8D8DF'\n      },\n      color: \"neutral\",\n      onClick: addEmoji('😍')\n    }, \"\\uD83D\\uDE0D\"))), __jsx(Typography, {\n      level: \"body3\",\n      sx: {\n        ml: 'auto',\n        color: '#73738c',\n        fontSize: '14px'\n      }\n    }, text.length, \" letter(s)\")),\n    endDecorator: __jsx(Box, {\n      sx: {\n        width: '100%'\n      }\n    }, __jsx(ImageList, {\n      sx: {\n        width: 500,\n        maxHeight: 350\n      },\n      cols: 3,\n      rowHeight: 164\n    }, images.map((item, index) => {\n      var _item$file2;\n      return __jsx(ImageListItem, {\n        sx: {\n          position: 'relative'\n        },\n        key: index\n      }, __jsx(IconButton, {\n        sx: {\n          position: 'absolute',\n          zIndex: 1\n        },\n        onClick: () => {\n          var _item$file;\n          return handleRemoveImagePreview((_item$file = item.file) === null || _item$file === void 0 ? void 0 : _item$file.lastModified);\n        }\n      }, __jsx(ClearRoundedIcon, {\n        sx: {\n          bgcolor: 'rgba(25, 25, 25, 0.5)',\n          color: 'white',\n          borderRadius: '100%',\n          p: 0.5,\n          my: 0.5\n        }\n      })), __jsx(\"img\", {\n        src: item.src,\n        srcSet: item.src,\n        alt: (_item$file2 = item.file) === null || _item$file2 === void 0 ? void 0 : _item$file2.name,\n        loading: \"lazy\"\n      }));\n    })), __jsx(Box, {\n      sx: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'right'\n      }\n    }, __jsx(LoadingButton, {\n      type: \"submit\",\n      variant: \"contained\",\n      loading: addPostLoading\n    }, \"Tweet\"))),\n    sx: {\n      minWidth: 300,\n      borderColor: '#D8D8DF',\n      \"&:hover\": {\n        borderColor: '#B9B9C6'\n      }\n    }\n  })));\n};\nexport default PostForm;","map":null,"metadata":{},"sourceType":"module"}