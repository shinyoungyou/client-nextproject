{"ast":null,"code":"import { all, fork, takeLatest, call, put, delay } from 'redux-saga/effects';\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, getDummyPosts, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, getSingleDummyPost, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, getDummyComment } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { faker } from '@faker-js/faker/locale/en_CA';\nfunction loadPostsAPI(data) {\n  return axios.post(`/api/posts/`, data);\n}\nfunction* loadPosts(action) {\n  // const result = yield call(loadPostsAPI, action.data);\n  yield delay(1000);\n  try {\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: getDummyPosts(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\nfunction* addPost(action) {\n  // const result = yield call(addPostAPI, action.data);\n  yield delay(1000);\n  try {\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: getSingleDummyPost(action, id)\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\nfunction* removePost(action) {\n  // const result = yield call(removePostAPI, action.data);\n  yield delay(1000);\n  try {\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment/`, data);\n}\nfunction* addComment(action) {\n  // const result = yield call(addCommentAPI, action.data);\n  yield delay(1000);\n  try {\n    const id = shortId.generate();\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: getDummyComment\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","call","put","delay","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","getDummyPosts","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","getSingleDummyPost","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","getDummyComment","ADD_POST_TO_ME","REMOVE_POST_OF_ME","axios","shortId","faker","loadPostsAPI","data","post","loadPosts","action","type","err","console","error","response","addPostAPI","id","addPost","generate","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","userSaga"],"sources":["/Users/home/Desktop/new-projects/client-nextproject/sagas/post.js"],"sourcesContent":["import { all, fork, takeLatest, call, put, delay } from 'redux-saga/effects';\nimport {\n  LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, getDummyPosts,\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, getSingleDummyPost,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, getDummyComment,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { faker } from '@faker-js/faker/locale/en_CA';\n\nfunction loadPostsAPI(data) {\n  return axios.post(`/api/posts/`, data);\n}\n\nfunction* loadPosts(action) {\n  // const result = yield call(loadPostsAPI, action.data);\n  yield delay(1000);\n  try{\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: getDummyPosts(10)\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\n\nfunction* addPost(action) {\n  // const result = yield call(addPostAPI, action.data);\n  yield delay(1000);\n  try{\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: getSingleDummyPost(action, id)\n    })\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\n\nfunction* removePost(action) {\n  // const result = yield call(removePostAPI, action.data);\n  yield delay(1000);\n  try{\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    })\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment/`, data);\n}\n\nfunction* addComment(action) {\n  // const result = yield call(addCommentAPI, action.data);\n  yield delay(1000);\n  try{\n    const id = shortId.generate();\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: getDummyComment\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts)\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost)\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment)\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLoadPost),\n    fork(watchAddPost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}