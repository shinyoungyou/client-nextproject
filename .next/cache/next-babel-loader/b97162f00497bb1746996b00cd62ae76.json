{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/new-projects/client-nextproject/pages/_document.tsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport Document, { Head, Html, Main, NextScript } from 'next/document';\nimport { ServerStyleSheets } from '@material-ui/core/styles';\nexport default class MyDocument extends Document {\n  render() {\n    return __jsx(Html, {\n      lang: \"en\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 13\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }\n    }), __jsx(\"body\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }\n    }, __jsx(Main, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }\n    }), __jsx(NextScript, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }\n    })));\n  }\n}\n\n// `getInitialProps` belongs to `_document` (instead of `_app`),\n// it's compatible with server-side generation (SSG).\nMyDocument.getInitialProps = async ctx => {\n  // Resolution/compiling order for NextJs applications.\n  //\n  // On the server:\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. document.getInitialProps\n  // 4. app.render\n  // 5. page.render\n  // 6. document.render\n  //\n  // On the server with error:\n  // 1. document.getInitialProps\n  // 2. app.render\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the client\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. app.render\n  // 4. page.render\n\n  // Render app and page and get the context of the page with collected side effects.\n\n  // SUMMARY:\n  // Getting the context/properties of each page, pulling out the JavaScript Style Sheets, and passing them to the client side to be render.\n\n  const sheets = new ServerStyleSheets();\n  const originalRenderPage = ctx.renderPage;\n  debugger;\n  ctx.renderPage = () =>\n  // We collect the styles of our App.\n  originalRenderPage({\n    enhanceApp: App => props => sheets.collect(__jsx(App, _extends({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 60\n      }\n    })))\n  });\n  const initialProps = await Document.getInitialProps(ctx);\n  return _objectSpread(_objectSpread({}, initialProps), {}, {\n    // Styles fragment is rendered after the app and page rendering finish.\n    styles: [...React.Children.toArray(initialProps.styles), sheets.getStyleElement()]\n  });\n};\n/*\nCODE DOCUMENTATION\n*  Setup a custom server-side stylesheet to be injected on the client side:\nDuring the getInitialProps function call, were are going to initialize a new server style sheet.\nServerStyleSheets() allows us to pull the styles from each page and re-render them on the app.\noriginalRenderPage contains the original property values of a page.\n\nTERMINOLOGY:\n* Material UI server side rendering:\nMaterial - UI was designed from the ground - up with the constraint of rendering on the server, but it's up to you to make sure it's correctly integrated.It's important to provide the page with the required CSS, otherwise the page will render with just the HTML then wait for the CSS to be injected by the client, causing it to flicker (FOUC). To inject the style down to the client, we need to:\n\nCreate a fresh, new ServerStyleSheets instance on every request.\nRender the React tree with the server - side collector.\nPull the CSS out.\nPass the CSS along to the client.\nOn the client side, the CSS will be injected a second time before removing the server - side injected CSS.\nRead https://material-ui.com/guides/server-rendering/.\n\n* ServerStyleSheets() allows us to pull the styles from each page and re - render them on the app.\n\n\n*/","map":{"version":3,"names":["React","Document","Head","Html","Main","NextScript","ServerStyleSheets","MyDocument","render","getInitialProps","ctx","sheets","originalRenderPage","renderPage","enhanceApp","App","props","collect","initialProps","styles","Children","toArray","getStyleElement"],"sources":["/Users/home/Desktop/new-projects/client-nextproject/pages/_document.tsx"],"sourcesContent":["import React from 'react'\nimport Document, { Head, Html, Main, NextScript } from 'next/document'\nimport { ServerStyleSheets } from '@material-ui/core/styles'\n\nexport default class MyDocument extends Document {\n\n    render() {\n        return (\n            <Html lang='en'>\n                <Head></Head>\n                <body>\n                <Main></Main>\n                <NextScript></NextScript>\n                </body>\n            </Html>\n        )\n    }\n}\n\n// `getInitialProps` belongs to `_document` (instead of `_app`),\n// it's compatible with server-side generation (SSG).\nMyDocument.getInitialProps = async (ctx) => {\n    // Resolution/compiling order for NextJs applications.\n    //\n    // On the server:\n    // 1. app.getInitialProps\n    // 2. page.getInitialProps\n    // 3. document.getInitialProps\n    // 4. app.render\n    // 5. page.render\n    // 6. document.render\n    //\n    // On the server with error:\n    // 1. document.getInitialProps\n    // 2. app.render\n    // 3. page.render\n    // 4. document.render\n    //\n    // On the client\n    // 1. app.getInitialProps\n    // 2. page.getInitialProps\n    // 3. app.render\n    // 4. page.render\n\n    // Render app and page and get the context of the page with collected side effects.\n\n    // SUMMARY:\n    // Getting the context/properties of each page, pulling out the JavaScript Style Sheets, and passing them to the client side to be render.\n\n    const sheets = new ServerStyleSheets()\n    const originalRenderPage = ctx.renderPage\n\n    debugger\n    ctx.renderPage = () =>\n        // We collect the styles of our App.\n        originalRenderPage({\n            enhanceApp: (App) => (props) => sheets.collect(<App {...props} />),\n        })\n\n    const initialProps = await Document.getInitialProps(ctx)\n\n    return {\n        ...initialProps,\n        // Styles fragment is rendered after the app and page rendering finish.\n        styles: [...React.Children.toArray(initialProps.styles), sheets.getStyleElement()],\n    }\n}\n/*\nCODE DOCUMENTATION\n*  Setup a custom server-side stylesheet to be injected on the client side:\nDuring the getInitialProps function call, were are going to initialize a new server style sheet.\nServerStyleSheets() allows us to pull the styles from each page and re-render them on the app.\noriginalRenderPage contains the original property values of a page.\n\nTERMINOLOGY:\n* Material UI server side rendering:\nMaterial - UI was designed from the ground - up with the constraint of rendering on the server, but it's up to you to make sure it's correctly integrated.It's important to provide the page with the required CSS, otherwise the page will render with just the HTML then wait for the CSS to be injected by the client, causing it to flicker (FOUC). To inject the style down to the client, we need to:\n\nCreate a fresh, new ServerStyleSheets instance on every request.\nRender the React tree with the server - side collector.\nPull the CSS out.\nPass the CSS along to the client.\nOn the client side, the CSS will be injected a second time before removing the server - side injected CSS.\nRead https://material-ui.com/guides/server-rendering/.\n\n* ServerStyleSheets() allows us to pull the styles from each page and re - render them on the app.\n\n\n*/"],"mappings":";;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,IAAIC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,UAAU,QAAQ,eAAe;AACtE,SAASC,iBAAiB,QAAQ,0BAA0B;AAE5D,eAAe,MAAMC,UAAU,SAASN,QAAQ,CAAC;EAE7CO,MAAM,GAAG;IACL,OACI,MAAC,IAAI;MAAC,IAAI,EAAC,IAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACX,MAAC,IAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAQ,EACb;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACA,MAAC,IAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAQ,EACb,MAAC,UAAU;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAc,CAClB,CACJ;EAEf;AACJ;;AAEA;AACA;AACAD,UAAU,CAACE,eAAe,GAAG,MAAOC,GAAG,IAAK;EACxC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA,MAAMC,MAAM,GAAG,IAAIL,iBAAiB,EAAE;EACtC,MAAMM,kBAAkB,GAAGF,GAAG,CAACG,UAAU;EAEzC;EACAH,GAAG,CAACG,UAAU,GAAG;EACb;EACAD,kBAAkB,CAAC;IACfE,UAAU,EAAGC,GAAG,IAAMC,KAAK,IAAKL,MAAM,CAACM,OAAO,CAAC,MAAC,GAAG,eAAKD,KAAK;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAI;EACrE,CAAC,CAAC;EAEN,MAAME,YAAY,GAAG,MAAMjB,QAAQ,CAACQ,eAAe,CAACC,GAAG,CAAC;EAExD,uCACOQ,YAAY;IACf;IACAC,MAAM,EAAE,CAAC,GAAGnB,KAAK,CAACoB,QAAQ,CAACC,OAAO,CAACH,YAAY,CAACC,MAAM,CAAC,EAAER,MAAM,CAACW,eAAe,EAAE;EAAC;AAE1F,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}