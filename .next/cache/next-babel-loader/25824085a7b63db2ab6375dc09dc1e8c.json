{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { loadPosts, loadPostsByUser, loadSinglePost, addPost, editPost, removePost, addComment, editComment, removeComment, likePost, unlikePost, uploadImages, retweet, undoRetweet } from \"../thunks/post\";\nimport shortId from 'shortid';\nimport { faker } from '@faker-js/faker/locale/en_CA';\nvar postSlice = createSlice({\n  name: 'post',\n  initialState: {\n    bringMorePosts: true,\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    bringMorePostsByUser: true,\n    loadPostsByUserLoading: false,\n    loadPostsByUserDone: false,\n    loadPostsByUserError: null,\n    loadSinglePostLoading: false,\n    loadSinglePostDone: false,\n    loadSinglePostError: null,\n    uploadImagesLoading: false,\n    uploadImagesDone: false,\n    uploadImagesError: null,\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    editPostLoading: false,\n    editPostDone: false,\n    editPostError: null,\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n    editCommentLoading: false,\n    editCommentDone: false,\n    editCommentError: null,\n    removeCommentLoading: false,\n    removeCommentDone: false,\n    removeCommentError: null,\n    likePostLoading: false,\n    likePostDone: false,\n    likePostError: null,\n    unlikePostLoading: false,\n    unlikePostDone: false,\n    unlikePostError: null,\n    retweetLoading: false,\n    retweetDone: false,\n    retweetError: null,\n    mainPosts: [],\n    postsByUser: [],\n    singlePost: null,\n    imagePaths: []\n  },\n  extraReducers: function extraReducers(builder) {\n    // builder.addCase(HYDRATE, (state, action) => {\n    //   return {\n    //     ...state,\n    //     ...action.payload.post,\n    //   }\n    // })\n    builder.addCase(loadPosts.pending, function (state, action) {\n      state.loadPostsLoading = true;\n      state.loadPostsDone = false;\n      state.loadPostsError = null;\n    });\n    builder.addCase(loadPosts.fulfilled, function (state, action) {\n      state.mainPosts = state.mainPosts.concat(action.payload);\n      state.loadPostsLoading = false;\n      state.loadPostsDone = true;\n      state.bringMorePosts = action.payload.length == 10;\n    });\n    builder.addCase(loadPosts.rejected, function (state, action) {\n      state.loadPostsLoading = false;\n      state.loadPostsError = action.payload;\n    });\n    builder.addCase(loadPostsByUser.pending, function (state, action) {\n      state.loadPostsByUserLoading = true;\n      state.loadPostsByUserDone = false;\n      state.loadPostsByUserError = null;\n    });\n    builder.addCase(loadPostsByUser.fulfilled, function (state, action) {\n      state.postsByUser = state.postsByUser.concat(action.payload);\n      state.loadPostsByUserLoading = false;\n      state.loadPostsByUserDone = true;\n      state.bringMorePostsByUser = action.payload.length == 10;\n    });\n    builder.addCase(loadPostsByUser.rejected, function (state, action) {\n      state.loadPostsByUserLoading = false;\n      state.loadPostsByUserError = action.payload;\n    });\n    builder.addCase(loadSinglePost.pending, function (state, action) {\n      state.loadSinglePostLoading = true;\n      state.loadSinglePostDone = false;\n      state.loadSinglePostError = null;\n    });\n    builder.addCase(loadSinglePost.fulfilled, function (state, action) {\n      state.singlePost = action.payload;\n      state.loadSinglePostLoading = false;\n      state.loadSinglePostDone = true;\n    });\n    builder.addCase(loadSinglePost.rejected, function (state, action) {\n      state.loadSinglePostLoading = false;\n      state.loadSinglePostError = action.payload;\n    });\n    builder.addCase(uploadImages.pending, function (state, action) {\n      state.uploadImagesLoading = true;\n      state.uploadImagesDone = false;\n      state.uploadImagesError = null;\n    });\n    builder.addCase(uploadImages.fulfilled, function (state, action) {\n      state.imagePaths = action.payload;\n      state.uploadImagesLoading = false;\n      state.uploadImagesDone = true;\n    });\n    builder.addCase(uploadImages.rejected, function (state, action) {\n      state.uploadImagesLoading = false;\n      state.uploadImagesError = action.payload;\n    });\n    builder.addCase(addPost.pending, function (state, action) {\n      state.addPostLoading = true;\n      state.addPostDone = false;\n      state.addPostError = null;\n    });\n    builder.addCase(addPost.fulfilled, function (state, action) {\n      state.mainPosts.unshift(action.payload);\n      state.addPostLoading = false;\n      state.addPostDone = true;\n    });\n    builder.addCase(addPost.rejected, function (state, action) {\n      state.addPostLoading = false;\n      state.addPostError = action.payload;\n    });\n    builder.addCase(editPost.pending, function (state, action) {\n      state.editPostLoading = true;\n      state.editPostDone = false;\n      state.editPostError = null;\n    });\n    builder.addCase(editPost.fulfilled, function (state, action) {\n      var retweetingPost = state.mainPosts.find(function (post) {\n        return post.RetweetId === action.payload.id;\n      });\n      if (retweetingPost) {\n        retweetingPost.Retweet.content = action.payload.content;\n        retweetingPost.Retweet.updatedAt = action.payload.updatedAt;\n        state.editPostLoading = false;\n        state.editPostDone = true;\n      }\n      var post = state.mainPosts.find(function (post) {\n        return post.id === action.payload.id;\n      });\n      if (post) {\n        post.content = action.payload.content;\n        post.updatedAt = action.payload.updatedAt;\n        state.editPostLoading = false;\n        state.editPostDone = true;\n      }\n    });\n    builder.addCase(editPost.rejected, function (state, action) {\n      state.editPostLoading = false;\n      state.editPostError = action.payload;\n    });\n    builder.addCase(removePost.pending, function (state, action) {\n      state.removePostLoading = true;\n      state.removePostDone = false;\n      state.removePostError = null;\n    });\n    builder.addCase(removePost.fulfilled, function (state, action) {\n      var retweetingPost = state.mainPosts.find(function (post) {\n        return post.RetweetId == action.payload.id;\n      });\n      if (retweetingPost) {\n        state.mainPosts = state.mainPosts.filter(function (post) {\n          return post.id !== retweetingPost.id;\n        });\n        state.removePostLoading = false;\n        state.removePostDone = true;\n      }\n      state.mainPosts = state.mainPosts.filter(function (post) {\n        return post.id !== action.payload.id;\n      });\n      state.removePostLoading = false;\n      state.removePostDone = true;\n    });\n    builder.addCase(removePost.rejected, function (state, action) {\n      state.removePostLoading = false;\n      state.removePostError = action.payload;\n    });\n    builder.addCase(addComment.pending, function (state, action) {\n      state.addCommentLoading = true;\n      state.addCommentDone = false;\n      state.addCommentError = null;\n    });\n    builder.addCase(addComment.fulfilled, function (state, action) {\n      var retweetingPost = state.mainPosts.find(function (post) {\n        return post.RetweetId == action.payload.PostId;\n      });\n      if (retweetingPost) {\n        retweetingPost.Retweet.Comments.unshift(action.payload);\n        state.addCommentLoading = false;\n        state.addCommentDone = true;\n      }\n      var post = state.mainPosts.find(function (post) {\n        return post.id == action.payload.PostId;\n      });\n      if (post) {\n        post.Comments.unshift(action.payload);\n        state.addCommentLoading = false;\n        state.addCommentDone = true;\n      }\n    });\n    builder.addCase(addComment.rejected, function (state, action) {\n      state.addCommentLoading = false;\n      state.addCommentError = action.payload;\n    });\n    builder.addCase(editComment.pending, function (state, action) {\n      state.editCommentLoading = true;\n      state.editCommentDone = false;\n      state.editCommentError = null;\n    });\n    builder.addCase(editComment.fulfilled, function (state, action) {\n      var retweetingPost = state.mainPosts.find(function (post) {\n        return post.RetweetId == action.payload.PostId;\n      });\n      if (retweetingPost) {\n        var comment = retweetingPost.Retweet.Comments.find(function (comment) {\n          return comment.id == action.payload.id;\n        });\n        if (comment) {\n          comment.content = action.payload.content;\n          comment.updatedAt = action.payload.updatedAt;\n          state.editCommentLoading = false;\n          state.editCommentDone = true;\n        }\n      }\n      var post = state.mainPosts.find(function (post) {\n        return post.id == action.payload.PostId;\n      });\n      if (post) {\n        var _comment = post.Comments.find(function (comment) {\n          return comment.id == action.payload.id;\n        });\n        if (_comment) {\n          _comment.content = action.payload.content;\n          _comment.updatedAt = action.payload.updatedAt;\n          state.editCommentLoading = false;\n          state.editCommentDone = true;\n        }\n      }\n    });\n    builder.addCase(editComment.rejected, function (state, action) {\n      state.editCommentLoading = false;\n      state.editCommentError = action.payload;\n    });\n    builder.addCase(removeComment.pending, function (state, action) {\n      state.removeCommentLoading = true;\n      state.removeCommentDone = false;\n      state.removeCommentError = null;\n    });\n    builder.addCase(removeComment.fulfilled, function (state, action) {\n      var retweetingPost = state.mainPosts.find(function (post) {\n        return post.RetweetId === action.payload.PostId;\n      });\n      if (retweetingPost) {\n        retweetingPost.Retweet.Comments = retweetingPost.Retweet.Comments.filter(function (comment) {\n          return comment.id !== action.payload.id;\n        });\n        state.removeCommentLoading = false;\n        state.removeCommentDone = true;\n      }\n      var post = state.mainPosts.find(function (post) {\n        return post.id === action.payload.PostId;\n      });\n      if (post) {\n        post.Comments = post.Comments.filter(function (comment) {\n          return comment.id !== action.payload.id;\n        });\n        state.removeCommentLoading = false;\n        state.removeCommentDone = true;\n      }\n    });\n    builder.addCase(removeComment.rejected, function (state, action) {\n      state.removeCommentLoading = false;\n      state.removeCommentError = action.payload;\n    });\n    builder.addCase(likePost.pending, function (state, action) {\n      state.likePostLoading = true;\n      state.likePostDone = false;\n      state.likePostError = null;\n    });\n    builder.addCase(likePost.fulfilled, function (state, action) {\n      var retweetingPost = state.mainPosts.find(function (post) {\n        return post.RetweetId == action.payload.PostId;\n      });\n      if (retweetingPost !== null) {\n        retweetingPost.Retweet.Likers.unshift({\n          id: action.payload.UserId\n        });\n        state.likePostLoading = false;\n        state.likePostDone = true;\n      }\n      var post = state.mainPosts.find(function (post) {\n        return post.id === action.payload.PostId;\n      });\n      if (post) {\n        post.Likers.unshift({\n          id: action.payload.UserId\n        });\n        state.likePostLoading = false;\n        state.likePostDone = true;\n      }\n    });\n    builder.addCase(likePost.rejected, function (state, action) {\n      state.likePostLoading = false;\n      state.likePostError = action.payload;\n    });\n    builder.addCase(unlikePost.pending, function (state, action) {\n      state.unlikePostLoading = true;\n      state.unlikePostDone = false;\n      state.unlikePostError = null;\n    });\n    builder.addCase(unlikePost.fulfilled, function (state, action) {\n      var retweetingPost = state.mainPosts.find(function (post) {\n        return post.RetweetId == action.payload.PostId;\n      });\n      if (retweetingPost !== null) {\n        retweetingPost.Retweet.Likers = retweetingPost.Retweet.Likers.filter(function (like) {\n          return like.id !== action.payload.UserId;\n        });\n        state.unlikePostLoading = false;\n        state.unlikePostDone = true;\n      }\n      var post = state.mainPosts.find(function (post) {\n        return post.id === action.payload.PostId;\n      });\n      if (post) {\n        post.Likers = post.Likers.filter(function (like) {\n          return like.id !== action.payload.UserId;\n        });\n        state.unlikePostLoading = false;\n        state.unlikePostDone = true;\n      }\n    });\n    builder.addCase(unlikePost.rejected, function (state, action) {\n      state.unlikePostLoading = false;\n      state.unlikePostError = action.payload;\n    });\n    builder.addCase(retweet.pending, function (state, action) {\n      state.retweetLoading = true;\n      state.retweetDone = false;\n      state.retweetError = null;\n    });\n    builder.addCase(retweet.fulfilled, function (state, action) {\n      state.mainPosts.unshift(action.payload);\n      state.retweetLoading = false;\n      state.retweetDone = true;\n    });\n    builder.addCase(retweet.rejected, function (state, action) {\n      state.retweetLoading = false;\n      state.retweetError = action.payload;\n    });\n    builder.addCase(undoRetweet.pending, function (state, action) {\n      state.undoRetweetLoading = true;\n      state.undoRetweetDone = false;\n      state.undoRetweetError = null;\n    });\n    builder.addCase(undoRetweet.fulfilled, function (state, action) {\n      state.mainPosts = state.mainPosts.filter(function (post) {\n        return post.id !== action.payload.id;\n      });\n      state.undoRetweetLoading = false;\n      state.undoRetweetDone = true;\n    });\n    builder.addCase(undoRetweet.rejected, function (state, action) {\n      state.undoRetweetLoading = false;\n      state.undoRetweetError = action.payload;\n    });\n  },\n  reducers: undefined\n});\nexport var getDummyPosts = function getDummyPosts(number) {\n  return Array(number).fill().map(function (post, index) {\n    return {\n      id: shortId.generate(),\n      content: faker.lorem.paragraphs(2),\n      createdAt: \"\".concat(faker.date.past(10)).substring(0, 24),\n      User: {\n        id: shortId.generate(),\n        username: faker.name.fullName()\n      },\n      Images: [{\n        src: \"\".concat(faker.image.cats(), \"?random=\").concat(Date.now() + index),\n        alt: \"cat\"\n      }],\n      Comments: [],\n      Likers: []\n    };\n  });\n};\nexport var postMyDummyPost = function postMyDummyPost(payload, id) {\n  return {\n    id: id,\n    content: faker.lorem.paragraphs(2),\n    createdAt: \"\".concat(faker.date.past(10)).substring(0, 24),\n    User: {\n      id: payload.userId,\n      username: payload.User.username\n    },\n    Images: Array(Math.floor(Math.random() * 4) + 1).fill().map(function (image, index) {\n      return {\n        src: \"\".concat(faker.image.cats(), \"?random=\").concat(Date.now() + index),\n        alt: \"Cat_0\".concat(index)\n      };\n    }),\n    Comments: [],\n    Likers: []\n  };\n};\nexport var postMyDummyComment = function postMyDummyComment(payload, id) {\n  return {\n    id: id,\n    postId: payload.postId,\n    content: faker.lorem.sentences(2),\n    createdAt: \"\".concat(faker.date.past(5)).substring(0, 24),\n    User: {\n      id: payload.userId,\n      username: payload.User.username\n    }\n  };\n};\nexport default postSlice;","map":null,"metadata":{},"sourceType":"module"}