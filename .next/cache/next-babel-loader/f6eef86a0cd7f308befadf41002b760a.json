{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { createWrapper } from 'next-redux-wrapper';\nimport logger from 'redux-logger';\nimport rootReducer from './reducers';\nvar isDev = true;\nvar createStore = function createStore() {\n  var middleware = getDefaultMiddleware();\n  if (isDev) {\n    middleware.push(logger);\n  }\n  var store = configureStore({\n    reducer: rootReducer,\n    middleware: middleware,\n    devTools: isDev\n  });\n  return store;\n};\nvar wrapper = createWrapper(createStore, {\n  debug: isDev\n});\nexport default wrapper;","map":{"version":3,"names":["configureStore","getDefaultMiddleware","createWrapper","logger","rootReducer","isDev","createStore","middleware","push","store","reducer","devTools","wrapper","debug"],"sources":["/Users/home/Desktop/new-projects/client-nextproject/store/index.js"],"sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { createWrapper } from 'next-redux-wrapper';\nimport logger from 'redux-logger';\nimport rootReducer from './reducers';\n\nconst isDev = process.env.NODE_ENV === 'development';\nconst createStore = () => {\n  const middleware = getDefaultMiddleware();\n  if (isDev) {\n    middleware.push(logger);\n  }\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware,\n    devTools: isDev,\n  });\n  return store;\n};\n\nconst wrapper = createWrapper(createStore, {\n  debug: isDev,\n});\n\nexport default wrapper;\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,oBAAoB,QAAQ,kBAAkB;AACvE,SAASC,aAAa,QAAQ,oBAAoB;AAClD,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,WAAW,MAAM,YAAY;AAEpC,IAAMC,KAAK,OAAyC;AACpD,IAAMC,WAAW,GAAG,SAAdA,WAAW,GAAS;EACxB,IAAMC,UAAU,GAAGN,oBAAoB,EAAE;EACzC,IAAII,KAAK,EAAE;IACTE,UAAU,CAACC,IAAI,CAACL,MAAM,CAAC;EACzB;EACA,IAAMM,KAAK,GAAGT,cAAc,CAAC;IAC3BU,OAAO,EAAEN,WAAW;IACpBG,UAAU,EAAVA,UAAU;IACVI,QAAQ,EAAEN;EACZ,CAAC,CAAC;EACF,OAAOI,KAAK;AACd,CAAC;AAED,IAAMG,OAAO,GAAGV,aAAa,CAACI,WAAW,EAAE;EACzCO,KAAK,EAAER;AACT,CAAC,CAAC;AAEF,eAAeO,OAAO"},"metadata":{},"sourceType":"module"}