{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { loadMyInfo, loadSingleUser, signUp, logIn, logOut, changeUsername, follow, unfollow, loadFollowings, loadFollowers, removeFollower } from \"../thunks/user\";\nvar userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    loadMyInfoLoading: false,\n    loadMyInfoDone: false,\n    loadMyInfoError: null,\n    loadSingleUserLoading: false,\n    loadSingleUserDone: false,\n    loadSingleUserError: null,\n    logInLoading: false,\n    logInDone: false,\n    logInError: null,\n    logOutLoading: false,\n    logOutDone: false,\n    logOutError: null,\n    signUpLoading: false,\n    signUpDone: false,\n    signUpError: null,\n    changeUsernameLoading: false,\n    changeUsernameDone: false,\n    changeUsernameError: null,\n    loadFollowingsLoading: false,\n    loadFollowingsDone: false,\n    loadFollowingsError: null,\n    followLoading: false,\n    followDone: false,\n    followError: null,\n    unfollowLoading: false,\n    unfollowDone: false,\n    unfollowError: null,\n    loadFollowersLoading: false,\n    loadFollowersDone: false,\n    loadFollowersError: null,\n    removeFollowerLoading: false,\n    removeFollowerDone: false,\n    removeFollowerError: null,\n    profileMenu: 0,\n    my: null,\n    singleUser: null,\n    User: []\n  },\n  reducers: {\n    addPostToMe: function addPostToMe(state, action) {\n      state.my.Posts.unshift({\n        id: action.payload\n      });\n    },\n    removePostToMe: function removePostToMe(state, action) {\n      state.my.Posts = state.my.Posts.filter(function (post) {\n        return post.id !== action.payload.id;\n      });\n    },\n    navigateProfile: function navigateProfile(state, action) {\n      state.profileMenu = action.payload;\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    // builder.addCase(HYDRATE, (state, action) => {\n    //   return {\n    //     ...state,\n    //     ...action.payload.user,\n    //   }\n    // })\n    builder.addCase(loadMyInfo.pending, function (state, action) {\n      state.loadMyInfoLoading = true;\n      state.loadMyInfoDone = false;\n      state.loadMyInfoError = null;\n    });\n    builder.addCase(loadMyInfo.fulfilled, function (state, action) {\n      state.loadMyInfoLoading = false;\n      state.my = action.payload;\n      state.loadMyInfoDone = true;\n    });\n    builder.addCase(loadMyInfo.rejected, function (state, action) {\n      state.loadMyInfoLoading = false;\n      state.loadMyInfoError = action.payload;\n    });\n    builder.addCase(loadSingleUser.pending, function (state, action) {\n      state.loadSingleUserLoading = true;\n      state.loadSingleUserDone = false;\n      state.loadSingleUserError = null;\n    });\n    builder.addCase(loadSingleUser.fulfilled, function (state, action) {\n      state.loadSingleUserLoading = false;\n      state.singleUser = action.payload;\n      state.loadSingleUserDone = true;\n    });\n    builder.addCase(loadSingleUser.rejected, function (state, action) {\n      state.loadSingleUserLoading = false;\n      state.loadSingleUserError = action.payload;\n    });\n    builder.addCase(logIn.pending, function (state, action) {\n      state.logInLoading = true;\n      state.logInDone = false;\n      state.logInError = null;\n    });\n    builder.addCase(logIn.fulfilled, function (state, action) {\n      state.logInLoading = false;\n      state.my = action.payload;\n      state.logInDone = true;\n    });\n    builder.addCase(logIn.rejected, function (state, action) {\n      state.logInLoading = false;\n      state.logInError = action.payload;\n    });\n    builder.addCase(logOut.pending, function (state, action) {\n      state.logOutLoading = true;\n      state.logOutDone = false;\n      state.logOutError = null;\n    });\n    builder.addCase(logOut.fulfilled, function (state, action) {\n      state.my = null;\n      state.logOutLoading = false;\n      state.logOutDone = true;\n    });\n    builder.addCase(logOut.rejected, function (state, action) {\n      state.logOutLoading = false;\n      state.logOutError = action.payload;\n    });\n    builder.addCase(signUp.pending, function (state, action) {\n      state.signUpLoading = true;\n      state.signUpDone = false;\n      state.signUpError = null;\n    });\n    builder.addCase(signUp.fulfilled, function (state, action) {\n      state.signUpLoading = false;\n      state.signUpDone = true;\n    });\n    builder.addCase(signUp.rejected, function (state, action) {\n      state.signUpLoading = false;\n      state.signUpError = action.payload;\n    });\n    builder.addCase(changeUsername.pending, function (state, action) {\n      state.changeUsernameLoading = true;\n      state.changeUsernameDone = false;\n      state.changeUsernameError = null;\n    });\n    builder.addCase(changeUsername.fulfilled, function (state, action) {\n      state.my.username = action.payload.username;\n      state.changeUsernameLoading = false;\n      state.changeUsernameDone = true;\n    });\n    builder.addCase(changeUsername.rejected, function (state, action) {\n      state.changeUsernameLoading = false;\n      state.changeUsernameError = action.payload;\n    });\n    builder.addCase(loadFollowings.pending, function (state, action) {\n      state.loadFollowingsLoading = true;\n      state.loadFollowingsDone = false;\n      state.loadFollowingsError = null;\n    });\n    builder.addCase(loadFollowings.fulfilled, function (state, action) {\n      state.loadFollowingsLoading = false;\n      state.my.Followings = action.payload || [];\n      state.loadFollowingsDone = true;\n    });\n    builder.addCase(loadFollowings.rejected, function (state, action) {\n      state.loadFollowingsLoading = false;\n      state.loadFollowingsError = action.payload;\n    });\n    builder.addCase(follow.pending, function (state, action) {\n      state.followLoading = true;\n      state.followDone = false;\n      state.followError = null;\n    });\n    builder.addCase(follow.fulfilled, function (state, action) {\n      state.my.Followings.unshift({\n        id: action.payload.id,\n        username: action.payload.username\n      });\n      state.followLoading = false;\n      state.followDone = true;\n    });\n    builder.addCase(follow.rejected, function (state, action) {\n      state.followLoading = false;\n      state.followError = action.payload;\n    });\n    builder.addCase(unfollow.pending, function (state, action) {\n      state.unfollowLoading = true;\n      state.unfollowDone = false;\n      state.unfollowError = null;\n    });\n    builder.addCase(unfollow.fulfilled, function (state, action) {\n      state.my.Followings = state.my.Followings.filter(function (user) {\n        return user.id !== action.payload.id;\n      });\n      state.unfollowLoading = false;\n      state.unfollowDone = true;\n    });\n    builder.addCase(unfollow.rejected, function (state, action) {\n      state.unfollowLoading = false;\n      state.unfollowError = action.payload;\n    });\n    builder.addCase(loadFollowers.pending, function (state, action) {\n      state.loadFollowersLoading = true;\n      state.loadFollowersDone = false;\n      state.loadFollowersError = null;\n    });\n    builder.addCase(loadFollowers.fulfilled, function (state, action) {\n      state.loadFollowersLoading = false;\n      state.my.Followers = action.payload || [];\n      state.loadFollowersDone = true;\n    });\n    builder.addCase(loadFollowers.rejected, function (state, action) {\n      state.loadFollowersLoading = false;\n      state.loadFollowersError = action.payload;\n    });\n    builder.addCase(removeFollower.pending, function (state, action) {\n      state.removeFollowerLoading = true;\n      state.removeFollowerDone = false;\n      state.removeFollowerError = null;\n    });\n    builder.addCase(removeFollower.fulfilled, function (state, action) {\n      state.my.Followers = state.my.Followers.filter(function (user) {\n        return user.id !== action.payload.id;\n      });\n      state.removeFollowerLoading = false;\n      state.removeFollowerDone = true;\n    });\n    builder.addCase(removeFollower.rejected, function (state, action) {\n      state.removeFollowerLoading = false;\n      state.removeFollowerError = action.payload;\n    });\n  }\n});\nvar _userSlice$actions = userSlice.actions,\n  addPostToMe = _userSlice$actions.addPostToMe,\n  removePostToMe = _userSlice$actions.removePostToMe,\n  navigateProfile = _userSlice$actions.navigateProfile;\nexport { addPostToMe, removePostToMe, navigateProfile };\nexport default userSlice;","map":null,"metadata":{},"sourceType":"module"}