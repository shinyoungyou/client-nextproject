{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport instance from '.';\nconst pause = duration => {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n};\nexport const loadMyInfo = createAsyncThunk('user/loadMyInfo', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.get('user/');\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const loadSingleUser = createAsyncThunk('user/loadSingleUser', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.get(`user/${payload.id}`);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const logIn = createAsyncThunk('user/logIn', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.post('user/login', payload);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const logOut = createAsyncThunk('user/logOut', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.post('user/logout');\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const signUp = createAsyncThunk('user/signUp', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.post('user/', payload);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const changeUsername = createAsyncThunk('user/changeUsername', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.patch('user/profile', payload);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const loadFollowings = createAsyncThunk('user/loadFollowings', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.get('user/followings');\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const follow = createAsyncThunk('user/follow', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.put(`user/following/${payload.id}`, payload);\n    // await pause(1000);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const unfollow = createAsyncThunk('user/unfollow', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.delete(`user/following/${payload.id}`);\n    // await pause(1000);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const loadFollowers = createAsyncThunk('user/loadFollowers', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.get('user/followers');\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});\n\nexport const removeFollower = createAsyncThunk('user/removeFollower', async (payload, thunkAPI) => {\n  try {\n    const response = await instance.delete(`user/follower/${payload.id}`);\n    // await pause(1000);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n});","map":null,"metadata":{},"sourceType":"module"}