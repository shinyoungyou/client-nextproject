{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadMyInfo, signUp } from '../store/thunks/user';\nimport Head from \"next/head\";\nimport { useRouter } from 'next/router';\nimport { useState, useEffect, useCallback } from \"react\";\nimport AppLayout from '../components/AppLayout';\nimport { Box, IconButton, OutlinedInput, InputLabel, InputAdornment, FormControl, FormControlLabel, Checkbox, Alert } from \"@mui/material\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport { LoadingButton } from '@mui/lab';\nimport wrapper from \"../store\";\nimport axios from \"axios\";\nconst Signup = () => {\n  const dispatch = useDispatch();\n  const {\n    signUpLoading,\n    signUpDone,\n    signUpError,\n    my\n  } = useSelector(state => state.user);\n  const {\n    0: form,\n    1: setForm\n  } = useState({\n    email: \"\",\n    username: \"\",\n    pass: \"\",\n    passCheck: \"\",\n    term: \"\"\n  });\n  const {\n    0: passError,\n    1: setPassError\n  } = useState(false);\n  const {\n    0: termError,\n    1: setTermError\n  } = useState(false);\n  const router = useRouter();\n  const {\n    email,\n    username,\n    pass,\n    passCheck,\n    term\n  } = form;\n  const {\n    0: showPassword,\n    1: setShowPassword\n  } = useState(false);\n  useEffect(() => {\n    if (my !== null && my.id) router.replace('/');\n    return;\n  }, [my]);\n  useEffect(() => {\n    if (signUpDone) {\n      setForm({\n        email: \"\",\n        username: \"\",\n        pass: \"\",\n        passCheck: \"\",\n        term: \"\"\n      });\n      router.replace('/');\n    }\n  }, [signUpDone]);\n  useEffect(() => {\n    if (signUpError) {\n      // mui alert compo 사용하기\n      alert(signUpError);\n    }\n  }, [signUpError]);\n  useEffect(() => {\n    if (pass !== passCheck) {\n      setPassError(true);\n    }\n    if (pass == passCheck) {\n      setPassError(false);\n    }\n  }, [form]);\n  const handleClickShowPassword = () => setShowPassword(show => !show);\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n  const handleChange = useCallback(e => {\n    // const { name, value } = e.target; // 비구조화 할당 한 name와 value는 read-only라서 name 또는 value의 값을 바꿀 수 없다.\n    if (e.target.checked) {\n      e.target.value = \"checked\";\n    }\n    setForm(prev => {\n      var _e$target, _e$target2;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        [(_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.name]: (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.value\n      });\n    });\n  }, [form]);\n  const handleSubmit = useCallback(e => {\n    e.preventDefault();\n    if (pass !== passCheck) {\n      console.log(\"before fake req\");\n      return setPassError(true);\n    }\n    if (!term) {\n      console.log(\"before fake req\");\n      return setTermError(true);\n    }\n\n    // send req first,\n    dispatch(signUp({\n      email,\n      username,\n      pass\n    }));\n    console.log(\"fake req\");\n    console.log(email, username, pass);\n    // and then initialize, but do not here\n  }, [form]);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Signup Page\")), __jsx(AppLayout, null, __jsx(Box, {\n    sx: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(FormControl, {\n    sx: {\n      m: 1,\n      width: \"100%\"\n    },\n    variant: \"outlined\",\n    style: {\n      marginBottom: \"4px\"\n    }\n  }, __jsx(InputLabel, {\n    htmlFor: \"Email\"\n  }, \"Email\"), __jsx(OutlinedInput, {\n    type: \"email\",\n    name: \"email\",\n    value: email,\n    onChange: handleChange,\n    id: \"Email\",\n    label: \"Email\"\n  })), __jsx(FormControl, {\n    sx: {\n      m: 1,\n      width: \"100%\"\n    },\n    variant: \"outlined\",\n    style: {\n      marginBottom: \"4px\"\n    }\n  }, __jsx(InputLabel, {\n    htmlFor: \"Username\"\n  }, \"Username\"), __jsx(OutlinedInput, {\n    type: \"text\",\n    name: \"username\",\n    value: username,\n    onChange: handleChange,\n    id: \"Username\",\n    label: \"Username\"\n  })), __jsx(FormControl, {\n    sx: {\n      m: 1,\n      width: \"100%\"\n    },\n    variant: \"outlined\",\n    style: {\n      marginTop: \"4px\"\n    }\n  }, __jsx(InputLabel, {\n    htmlFor: \"Password\"\n  }, \"Password\"), __jsx(OutlinedInput, {\n    type: showPassword ? \"text\" : \"password\",\n    name: \"pass\",\n    value: pass,\n    onChange: handleChange,\n    required: true,\n    id: \"Password\",\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: handleClickShowPassword,\n      onMouseDown: handleMouseDownPassword,\n      edge: \"end\"\n    }, showPassword ? __jsx(VisibilityOff, null) : __jsx(Visibility, null))),\n    label: \"Password\"\n  })), __jsx(FormControl, {\n    sx: {\n      m: 1,\n      width: \"100%\"\n    },\n    variant: \"outlined\",\n    style: {\n      marginTop: \"4px\"\n    }\n  }, __jsx(InputLabel, {\n    htmlFor: \"Password-Check\"\n  }, \"Password Check\"), __jsx(OutlinedInput, {\n    type: showPassword ? \"text\" : \"password\",\n    name: \"passCheck\",\n    value: passCheck,\n    onChange: handleChange,\n    required: true,\n    id: \"Password-Check\",\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"toggle password visibility\",\n      onClick: handleClickShowPassword,\n      onMouseDown: handleMouseDownPassword,\n      edge: \"end\"\n    }, showPassword ? __jsx(VisibilityOff, null) : __jsx(Visibility, null))),\n    label: \"Password-Check\"\n  })), passError && __jsx(\"div\", {\n    style: {\n      color: 'red'\n    }\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"), __jsx(Box, {\n    sx: {\n      margin: '0 8px'\n    }\n  }, __jsx(FormControlLabel, {\n    sx: {\n      display: 'block'\n    },\n    control: __jsx(Checkbox, {\n      name: \"term\",\n      value: term,\n      onChange: handleChange\n    }),\n    label: \"\\uC81C\\uB85C\\uCD08 \\uB9D0\\uC744 \\uC798 \\uB4E4\\uC744 \\uAC83\\uC744 \\uB3D9\\uC758\\uD569\\uB2C8\\uB2E4.\"\n  }), termError && __jsx(Alert, {\n    severity: \"error\"\n  }, \"This is an error alert \\u2014 check it out!\"), __jsx(LoadingButton, {\n    sx: {\n      display: 'block'\n    },\n    type: \"submit\",\n    variant: \"contained\",\n    loading: signUpLoading\n  }, \"Register\"))))));\n};\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n  if (cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n  await context.store.dispatch(loadMyInfo());\n  // console.log(context.req);\n});\n\nexport default Signup;","map":null,"metadata":{},"sourceType":"module"}