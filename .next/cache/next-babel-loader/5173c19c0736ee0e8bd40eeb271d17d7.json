{"ast":null,"code":"var __jsx = React.createElement;\nimport { useSelector, useDispatch } from 'react-redux';\nimport { editPost, removePost, likePost, unlikePost } from '../store/thunks/post';\nimport React, { useState, useEffect } from 'react';\nimport Link from \"next/link\";\nimport moment from 'moment';\nimport MoreMenu from \"./MoreMenu\";\nimport RetweetMenu from \"./RetweetMenu\";\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport CommentListItem from './CommentListItem';\nimport { ExpandMore } from \"../styles\";\nimport { EditContent } from '../styles/styled-components';\nimport { Card, CardHeader, CardContent, CardActions, Collapse, Avatar, IconButton, Typography, List, ListSubheader, Tooltip } from '@mui/material';\nimport { blue } from '@mui/material/colors';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\nimport RepeatIcon from '@mui/icons-material/Repeat';\nimport ModeCommentOutlinedIcon from '@mui/icons-material/ModeCommentOutlined';\nconst PostCard = ({\n  post,\n  posts,\n  retweetingPostId\n}) => {\n  var _post$Likers, _post$Images, _post$Likers2, _post$Comments;\n  const my = useSelector(state => state.user.my);\n  const {\n    editPostDone,\n    editPostLoading,\n    removePostLoading\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const {\n    0: editStatus,\n    1: setEditStatus\n  } = useState(\"beforeEdit\");\n  const {\n    0: content,\n    1: setContent\n  } = useState(post.content);\n  const {\n    0: expanded,\n    1: setExpanded\n  } = useState(false);\n  const retweetingPost = posts.find(retweetingPost => retweetingPost.id == retweetingPostId);\n  const retweetedTimes = posts.filter(retweetingPost => retweetingPost.RetweetId == post.id).length;\n  const isRetweetedByMe = post.RetweetId && post.UserId == (my === null || my === void 0 ? void 0 : my.id) || posts.find(mainPost => post.id == mainPost.RetweetId && mainPost.UserId == (my === null || my === void 0 ? void 0 : my.id));\n  useEffect(() => {\n    if (editPostDone) {\n      setEditStatus(\"beforeEdit\");\n    }\n  }, [editPostDone]);\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n  const {\n    0: anchorEl,\n    1: setAnchorEl\n  } = useState(null);\n  const {\n    0: retweetEl,\n    1: setRetweetEl\n  } = useState(null);\n  const open = Boolean(anchorEl);\n  const openRetweet = Boolean(retweetEl);\n  // MouseEvent<HTMLButtonElement, MouseEvent>\n  // BaseSyntheticEvent<HTMLButtonElement>.currentTarget\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleRetweetButton = event => {\n    setRetweetEl(event.currentTarget);\n  };\n  const handleContentChange = e => {\n    setContent(e.target.value);\n  };\n  const handleEditPost = post => {\n    if (editStatus === \"beforeEdit\") {\n      setEditStatus(\"editing\");\n    } else if (editStatus === \"editing\") {\n      dispatch(editPost({\n        id: post.id,\n        content\n      }));\n      setEditStatus(\"pending\");\n    }\n  };\n  const handleDeletePost = post => {\n    dispatch(removePost(post));\n  };\n  const isLiked = (_post$Likers = post.Likers) === null || _post$Likers === void 0 ? void 0 : _post$Likers.find(like => like.id == (my === null || my === void 0 ? void 0 : my.id));\n  const handleLikeButton = post => {\n    if (my === null) return alert('로그인이 필요합니다.');\n    if (isLiked) {\n      dispatch(unlikePost({\n        postId: post.id\n      }));\n    } else {\n      dispatch(likePost({\n        postId: post.id\n      }));\n    }\n  };\n  return __jsx(Card, {\n    sx: {\n      m: 1,\n      mb: 3\n    }\n  }, retweetingPostId && __jsx(Link, {\n    href: `/user/${retweetingPost === null || retweetingPost === void 0 ? void 0 : retweetingPost.User.id}`\n  }, __jsx(\"a\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      color: 'inherit',\n      textDecoration: 'none'\n    }\n  }, __jsx(RepeatIcon, null), (retweetingPost === null || retweetingPost === void 0 ? void 0 : retweetingPost.User.username) === (my === null || my === void 0 ? void 0 : my.username) ? \"You\" : retweetingPost === null || retweetingPost === void 0 ? void 0 : retweetingPost.User.username, \" Retweeted\")), __jsx(CardHeader, {\n    avatar: __jsx(Avatar, {\n      alt: post.User.username,\n      src: \"/static/images/avatar/1.jpg\",\n      sx: {\n        bgcolor: blue[500]\n      }\n    }),\n    action: my !== null && __jsx(React.Fragment, null, __jsx(Tooltip, {\n      title: \"More\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"more\",\n      id: \"long-button\",\n      \"aria-controls\": open ? 'long-menu' : undefined,\n      \"aria-expanded\": open ? 'true' : undefined,\n      \"aria-haspopup\": \"true\",\n      onClick: handleClick\n    }, __jsx(MoreVertIcon, null))), __jsx(MoreMenu, {\n      item: post,\n      anchorEl: anchorEl,\n      setAnchorEl: setAnchorEl,\n      open: open,\n      editStatus: editStatus,\n      setEditStatus: setEditStatus,\n      handleEdit: () => handleEditPost(post),\n      editLoading: editPostLoading,\n      handleDelete: () => handleDeletePost(post),\n      removeLoading: removePostLoading\n    })),\n    title: __jsx(Link, {\n      href: `/user/${post.UserId}`\n    }, __jsx(\"a\", {\n      style: {\n        color: 'inherit',\n        textDecoration: 'none'\n      }\n    }, post.User.username)),\n    subheader: post.createdAt === post.updatedAt ? moment(post.createdAt).startOf('day').fromNow() : `Edited · ${moment(post.updatedAt).startOf('day').fromNow()}`\n  }), ((_post$Images = post.Images) === null || _post$Images === void 0 ? void 0 : _post$Images.length) > 0 && post.Images.length < 5 && __jsx(PostImages, {\n    images: post.Images\n  }), __jsx(CardContent, null, __jsx(Typography, {\n    variant: \"body2\",\n    color: \"text.secondary\"\n  }, editStatus === \"editing\" ? __jsx(EditContent, {\n    onChange: handleContentChange\n  }, content) : post.content)), __jsx(CardActions, {\n    disableSpacing: true\n  }, __jsx(Tooltip, {\n    title: isLiked ? \"Unlike\" : \"Like\"\n  }, __jsx(IconButton, {\n    onClick: () => handleLikeButton(post),\n    \"aria-label\": \"add to favorites\",\n    sx: {\n      py: 0,\n      fontSize: \"inherit\",\n      \"&:hover\": {\n        color: \"#F91880\",\n        bgcolor: 'transparent'\n      }\n    }\n  }, __jsx(IconButton, {\n    sx: {\n      color: \"inherit\",\n      \"&:hover\": {\n        bgcolor: 'rgba(249, 24, 128, 0.1)'\n      }\n    }\n  }, __jsx(FavoriteBorderIcon, null)), ((_post$Likers2 = post.Likers) === null || _post$Likers2 === void 0 ? void 0 : _post$Likers2.length) > 0 ? post.Likers.length : 0)), __jsx(React.Fragment, null, __jsx(Tooltip, {\n    title: isRetweetedByMe ? \"Undo Retweet\" : \"Retweet\"\n  }, __jsx(IconButton, {\n    onClick: handleRetweetButton,\n    \"aria-label\": \"retweet\",\n    sx: {\n      py: 0,\n      fontSize: \"inherit\",\n      \"&:hover\": {\n        color: \"#53b781\",\n        bgcolor: 'transparent'\n      }\n    }\n  }, __jsx(IconButton, {\n    sx: {\n      color: \"inherit\",\n      \"&:hover\": {\n        bgcolor: '#e6f1eb'\n      }\n    }\n  }, __jsx(RepeatIcon, null)), retweetedTimes)), __jsx(RetweetMenu, {\n    post: post,\n    anchorEl: retweetEl,\n    setAnchorEl: setRetweetEl,\n    open: openRetweet\n  })), __jsx(Tooltip, {\n    title: \"Reply\"\n  }, __jsx(ExpandMore, {\n    expand: expanded,\n    onClick: handleExpandClick,\n    \"aria-expanded\": expanded,\n    \"aria-label\": \"show more\"\n  }, __jsx(ModeCommentOutlinedIcon, null)))), __jsx(Collapse, {\n    in: expanded,\n    timeout: \"auto\",\n    unmountOnExit: true\n  }, my !== null && __jsx(CommentForm, {\n    post: post\n  }), __jsx(List, {\n    subheader: __jsx(ListSubheader, null, post.Comments ? post.Comments.length : 0, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n    sx: {\n      m: 1,\n      bgcolor: 'background.paper'\n    }\n  }, (_post$Comments = post.Comments) === null || _post$Comments === void 0 ? void 0 : _post$Comments.map(comment => __jsx(CommentListItem, {\n    comment: comment,\n    key: comment.id\n  })))));\n};\nexport default PostCard;","map":null,"metadata":{},"sourceType":"module"}