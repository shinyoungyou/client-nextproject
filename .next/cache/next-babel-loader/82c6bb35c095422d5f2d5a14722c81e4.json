{"ast":null,"code":"var __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { ServerStyleSheets } from \"@material-ui/core\";\nimport Document, { Head, Html, Main, NextScript } from \"next/document\";\nimport React from \"react\";\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const sheets = new ServerStyleSheets();\n    const originalRenderPage = ctx.renderPage;\n    ctx.renderPage = () => originalRenderPage({\n      enhanceApp: App => props => {\n        return sheets.collect(__jsx(App, props));\n      }\n    });\n    const initialProps = await Document.getInitialProps(ctx);\n    return _objectSpread(_objectSpread({}, initialProps), {}, {\n      styles: [...React.Children.toArray(initialProps.styles), sheets.getStyleElement()]\n    });\n  }\n  render() {\n    return __jsx(Html, null, __jsx(Head, null, __jsx(\"meta\", {\n      name: \"theme-color\",\n      content: \"#000000\"\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://fonts.googleapis.com/icon?family=Material+Icons\"\n    })), __jsx(\"body\", null, __jsx(Main, null), __jsx(NextScript, null)));\n  }\n}\nMyDocument.getInitialProps = async ctx => {\n  const sheets = new ServerStyleSheets();\n  const originalRenderPage = ctx.renderPage;\n  ctx.renderPage = () => originalRenderPage({\n    enhanceApp: App => props => sheets.collect(__jsx(App, props))\n  });\n  const initialProps = await Document.getInitialProps(ctx);\n  return _objectSpread(_objectSpread({}, initialProps), {}, {\n    styles: [...React.Children.toArray(initialProps.styles), sheets.getStyleElement()]\n  });\n};\nexport default MyDocument;","map":null,"metadata":{},"sourceType":"module"}