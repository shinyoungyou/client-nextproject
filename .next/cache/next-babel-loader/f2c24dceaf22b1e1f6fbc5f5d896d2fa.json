{"ast":null,"code":"import { all, fork, takeLatest, call, put, delay } from 'redux-saga/effects';\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, dummyPost, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, getSingledummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { faker } from '@faker-js/faker/locale/en_CA';\nfunction addPostAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\nfunction* addPost(action) {\n  // const result = yield call(addPostAPI, action.data);\n  yield delay(1000);\n  try {\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: getSingledummyPost()\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\nfunction* removePost(action) {\n  // const result = yield call(removePostAPI, action.data);\n  yield delay(1000);\n  try {\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment/`, data);\n}\nfunction* addComment(action) {\n  // const result = yield call(addCommentAPI, action.data);\n  yield delay(1000);\n  try {\n    const id = shortId.generate();\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        id,\n        postId: action.data.postId,\n        content: faker.lorem.sentences(2),\n        createdAt: `${faker.date.past(5)}`.substring(0, 24),\n        User: {\n          id: action.data.userId,\n          username: faker.name.fullName()\n        }\n      }\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPost);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* userSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","call","put","delay","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","dummyPost","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","getSingledummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","axios","shortId","faker","addPostAPI","data","post","id","addPost","action","generate","type","err","console","error","response","removePostAPI","removePost","addCommentAPI","postId","addComment","content","lorem","sentences","createdAt","date","past","substring","User","userId","username","name","fullName","watchLoadPost","loadPost","watchAddPost","watchRemovePost","watchAddComment","userSaga"],"sources":["/Users/home/Desktop/new-projects/client-nextproject/sagas/post.js"],"sourcesContent":["import { all, fork, takeLatest, call, put, delay } from 'redux-saga/effects';\nimport {\n  LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, dummyPost,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, getSingledummyPost\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { faker } from '@faker-js/faker/locale/en_CA';\n\nfunction addPostAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\n\nfunction* addPost(action) {\n  // const result = yield call(addPostAPI, action.data);\n  yield delay(1000);\n  try{\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: getSingledummyPost()\n    })\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\n\nfunction* removePost(action) {\n  // const result = yield call(removePostAPI, action.data);\n  yield delay(1000);\n  try{\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    })\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment/`, data);\n}\n\nfunction* addComment(action) {\n  // const result = yield call(addCommentAPI, action.data);\n  yield delay(1000);\n  try{\n    const id = shortId.generate();\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        id,\n        postId: action.data.postId,\n        content: faker.lorem.sentences(2),\n        createdAt: `${faker.date.past(5)}`.substring(0,24),\n        User: {\n          id: action.data.userId,\n          username: faker.name.fullName()\n        },\n      },\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPost)\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost)\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment)\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLoadPost),\n    fork(watchAddPost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}