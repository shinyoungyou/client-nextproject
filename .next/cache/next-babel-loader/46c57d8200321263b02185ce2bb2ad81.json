{"ast":null,"code":"var __jsx = React.createElement;\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport wrapper from \"../../store\";\nimport { loadMyInfo, loadSingleUser } from \"../../store/thunks/user\";\nimport { loadPostsByUser } from \"../../store/thunks/post\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Head from 'next/head';\nimport AppLayout from \"../../components/AppLayout\";\nimport PostCard from \"../../components/PostCard\";\nimport UserProfile from \"../../components/UserProfile\";\nconst Post = () => {\n  const {\n    singleUser,\n    my\n  } = useSelector(state => state.user);\n  const {\n    postsByUser,\n    loadPostsByUserLoading,\n    bringMorePostsByUser\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    0: prevLastId,\n    1: setPrevLastId\n  } = useState(-1);\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (!loadPostsByUserLoading && bringMorePostsByUser) {\n          var _postsByUser;\n          if (id != null && postsByUser != null && prevLastId != ((_postsByUser = postsByUser[postsByUser.length - 1]) === null || _postsByUser === void 0 ? void 0 : _postsByUser.id)) {\n            var _postsByUser2;\n            dispatch(loadPostsByUser({\n              id: parseInt(id),\n              lastId: postsByUser[postsByUser.length - 1].id\n            }));\n            setPrevLastId((_postsByUser2 = postsByUser[postsByUser.length - 1]) === null || _postsByUser2 === void 0 ? void 0 : _postsByUser2.id);\n          }\n        }\n      }\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [loadPostsByUserLoading, bringMorePostsByUser]);\n  return __jsx(AppLayout, null, singleUser && __jsx(Head, null, __jsx(\"title\", null, singleUser.username, \"\\uB2D8\\uC758 \\uAE00\"), __jsx(\"meta\", {\n    name: \"description\",\n    content: `${singleUser.username}님의 게시글`\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: `${singleUser.username}님의 게시글`\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: `${singleUser.username}님의 게시글`\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: \"https://nodebird.com/favicon.ico\"\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `https://nodebird.com/user/${id}`\n  })), singleUser && singleUser.id != (my === null || my === void 0 ? void 0 : my.id) ? __jsx(UserProfile, {\n    user: singleUser,\n    maxWidth: 660\n  }) : null, postsByUser === null || postsByUser === void 0 ? void 0 : postsByUser.map(post => post.Retweet ? __jsx(PostCard, {\n    post: post.Retweet,\n    posts: postsByUser,\n    retweetingPostId: post.id,\n    key: post.id\n  }) : __jsx(PostCard, {\n    post: post,\n    posts: postsByUser,\n    retweetingPostId: null,\n    key: post.id\n  })));\n};\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n  if (cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n  await context.store.dispatch(loadMyInfo());\n  if (context.params != null) {\n    await context.store.dispatch(loadSingleUser({\n      id: parseInt(context.params.id)\n    }));\n    await context.store.dispatch(loadPostsByUser({\n      id: parseInt(context.params.id)\n    }));\n  }\n  // console.log(context.req);\n});\n\nexport default Post;","map":null,"metadata":{},"sourceType":"module"}