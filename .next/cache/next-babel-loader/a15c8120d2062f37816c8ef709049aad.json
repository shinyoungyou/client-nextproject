{"ast":null,"code":"import { all, fork, takeLatest, call, put, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, dummyPost, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { faker } from '@faker-js/faker';\nfunction addPostAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\nfunction* addPost(action) {\n  // const result = yield call(addPostAPI, action.data);\n  yield delay(1000);\n  try {\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n        createdAt: faker.date.past(),\n        User: {\n          id: 1,\n          username: \"Shrimp and Chorizo Paella\"\n        },\n        Images: [{\n          src: faker.image.business(),\n          alt: \"business\"\n        }]\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\nfunction* removePost(action) {\n  // const result = yield call(removePostAPI, action.data);\n  yield delay(1000);\n  try {\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: dummyPost\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: dummyPost\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment/`, data);\n}\nfunction* addComment(action) {\n  // const result = yield call(addCommentAPI, action.data);\n  yield delay(1000);\n  try {\n    const id = shortId.generate();\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        id: shortId.generate()\n      }\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* userSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","takeLatest","call","put","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","dummyPost","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","axios","shortId","faker","addPostAPI","data","post","id","addPost","action","generate","type","content","createdAt","date","past","User","username","Images","src","image","business","alt","err","console","error","response","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","watchAddComment","userSaga"],"sources":["/Users/home/Desktop/new-projects/client-nextproject/sagas/post.js"],"sourcesContent":["import { all, fork, takeLatest, call, put, delay } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, dummyPost,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { faker } from '@faker-js/faker';\n\n\nfunction addPostAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\n\nfunction* addPost(action) {\n  // const result = yield call(addPostAPI, action.data);\n  yield delay(1000);\n  try{\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n        createdAt: faker.date.past(),\n        User: {\n          id: 1,\n          username: \"Shrimp and Chorizo Paella\"\n        },\n        Images: [\n          {\n            src: faker.image.business(),\n            alt: \"business\"\n          }\n        ]\n      }\n    })\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\n\nfunction* removePost(action) {\n  // const result = yield call(removePostAPI, action.data);\n  yield delay(1000);\n  try{\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: dummyPost\n    })\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: dummyPost\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment/`, data);\n}\n\nfunction* addComment(action) {\n  // const result = yield call(addCommentAPI, action.data);\n  yield delay(1000);\n  try{\n    const id = shortId.generate();\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        id: shortId.generate(),\n        \n      },\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost)\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment)\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}