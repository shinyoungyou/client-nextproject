{"ast":null,"code":"function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(loadPosts),\n  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(addPost),\n  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(removePost),\n  _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(addComment),\n  _marked5 = /*#__PURE__*/_regeneratorRuntime().mark(removeComment),\n  _marked6 = /*#__PURE__*/_regeneratorRuntime().mark(watchLoadPost),\n  _marked7 = /*#__PURE__*/_regeneratorRuntime().mark(watchAddPost),\n  _marked8 = /*#__PURE__*/_regeneratorRuntime().mark(watchLikePost),\n  _marked9 = /*#__PURE__*/_regeneratorRuntime().mark(watchRemovePost),\n  _marked10 = /*#__PURE__*/_regeneratorRuntime().mark(watchAddComment),\n  _marked11 = /*#__PURE__*/_regeneratorRuntime().mark(watchRemoveComment),\n  _marked12 = /*#__PURE__*/_regeneratorRuntime().mark(postSaga);\nimport { all, fork, takeLatest, call, put, delay } from 'redux-saga/effects';\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, getDummyPosts, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, postMyDummyPost, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, postMyDummyComment, REMOVE_COMMENT_REQUEST, REMOVE_COMMENT_SUCCESS, REMOVE_COMMENT_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from 'axios';\nimport shortId from 'shortid';\nfunction loadPostsAPI(data) {\n  return axios.post(\"/api/posts/\", data);\n}\nfunction loadPosts(action) {\n  return _regeneratorRuntime().wrap(function loadPosts$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return delay(1000);\n      case 2:\n        _context.prev = 2;\n        _context.next = 5;\n        return put({\n          type: LOAD_POSTS_SUCCESS,\n          data: getDummyPosts(10)\n        });\n      case 5:\n        _context.next = 12;\n        break;\n      case 7:\n        _context.prev = 7;\n        _context.t0 = _context[\"catch\"](2);\n        console.error(_context.t0);\n        _context.next = 12;\n        return put({\n          type: LOAD_POSTS_FAILURE,\n          error: _context.t0.response.data\n        });\n      case 12:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked, null, [[2, 7]]);\n}\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.id), data);\n}\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime().wrap(function addPost$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return delay(1000);\n      case 2:\n        _context2.prev = 2;\n        id = shortId.generate();\n        _context2.next = 6;\n        return put({\n          type: ADD_POST_SUCCESS,\n          data: postMyDummyPost(action, id)\n        });\n      case 6:\n        _context2.next = 8;\n        return put({\n          type: ADD_POST_TO_ME,\n          data: id\n        });\n      case 8:\n        _context2.next = 15;\n        break;\n      case 10:\n        _context2.prev = 10;\n        _context2.t0 = _context2[\"catch\"](2);\n        console.error(_context2.t0);\n        _context2.next = 15;\n        return put({\n          type: ADD_POST_FAILURE,\n          error: _context2.t0.response.data\n        });\n      case 15:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2, null, [[2, 10]]);\n}\nfunction removePostAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.id), data);\n}\nfunction removePost(action) {\n  return _regeneratorRuntime().wrap(function removePost$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return delay(1000);\n      case 2:\n        _context3.prev = 2;\n        _context3.next = 5;\n        return put({\n          type: REMOVE_POST_SUCCESS,\n          data: action.data\n        });\n      case 5:\n        _context3.next = 7;\n        return put({\n          type: REMOVE_POST_OF_ME,\n          data: action.data\n        });\n      case 7:\n        _context3.next = 14;\n        break;\n      case 9:\n        _context3.prev = 9;\n        _context3.t0 = _context3[\"catch\"](2);\n        console.error(_context3.t0);\n        _context3.next = 14;\n        return put({\n          type: REMOVE_POST_FAILURE,\n          error: _context3.t0.response.data\n        });\n      case 14:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3, null, [[2, 9]]);\n}\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment/\"), data);\n}\nfunction addComment(action) {\n  var id;\n  return _regeneratorRuntime().wrap(function addComment$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        _context4.next = 2;\n        return delay(1000);\n      case 2:\n        _context4.prev = 2;\n        id = shortId.generate();\n        _context4.next = 6;\n        return put({\n          type: ADD_COMMENT_SUCCESS,\n          data: postMyDummyComment(action, id)\n        });\n      case 6:\n        _context4.next = 13;\n        break;\n      case 8:\n        _context4.prev = 8;\n        _context4.t0 = _context4[\"catch\"](2);\n        console.error(_context4.t0);\n        _context4.next = 13;\n        return put({\n          type: ADD_COMMENT_FAILURE,\n          error: _context4.t0.response.data\n        });\n      case 13:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, _marked4, null, [[2, 8]]);\n}\nfunction removeCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.id), data);\n}\nfunction removeComment(action) {\n  return _regeneratorRuntime().wrap(function removeComment$(_context5) {\n    while (1) switch (_context5.prev = _context5.next) {\n      case 0:\n        _context5.next = 2;\n        return delay(1000);\n      case 2:\n        _context5.prev = 2;\n        _context5.next = 5;\n        return put({\n          type: REMOVE_COMMENT_SUCCESS,\n          data: action.data\n        });\n      case 5:\n        _context5.next = 12;\n        break;\n      case 7:\n        _context5.prev = 7;\n        _context5.t0 = _context5[\"catch\"](2);\n        console.error(_context5.t0);\n        _context5.next = 12;\n        return put({\n          type: REMOVE_COMMENT_FAILURE,\n          error: _context5.t0.response.data\n        });\n      case 12:\n      case \"end\":\n        return _context5.stop();\n    }\n  }, _marked5, null, [[2, 7]]);\n}\nfunction watchLoadPost() {\n  return _regeneratorRuntime().wrap(function watchLoadPost$(_context6) {\n    while (1) switch (_context6.prev = _context6.next) {\n      case 0:\n        _context6.next = 2;\n        return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n      case 2:\n      case \"end\":\n        return _context6.stop();\n    }\n  }, _marked6);\n}\nfunction watchAddPost() {\n  return _regeneratorRuntime().wrap(function watchAddPost$(_context7) {\n    while (1) switch (_context7.prev = _context7.next) {\n      case 0:\n        _context7.next = 2;\n        return takeLatest(ADD_POST_REQUEST, addPost);\n      case 2:\n      case \"end\":\n        return _context7.stop();\n    }\n  }, _marked7);\n}\nfunction watchLikePost() {\n  return _regeneratorRuntime().wrap(function watchLikePost$(_context8) {\n    while (1) switch (_context8.prev = _context8.next) {\n      case 0:\n        _context8.next = 2;\n        return takeLatest(LIKE_POST_REQUEST, addPost);\n      case 2:\n      case \"end\":\n        return _context8.stop();\n    }\n  }, _marked8);\n}\nfunction watchRemovePost() {\n  return _regeneratorRuntime().wrap(function watchRemovePost$(_context9) {\n    while (1) switch (_context9.prev = _context9.next) {\n      case 0:\n        _context9.next = 2;\n        return takeLatest(REMOVE_POST_REQUEST, removePost);\n      case 2:\n      case \"end\":\n        return _context9.stop();\n    }\n  }, _marked9);\n}\nfunction watchAddComment() {\n  return _regeneratorRuntime().wrap(function watchAddComment$(_context10) {\n    while (1) switch (_context10.prev = _context10.next) {\n      case 0:\n        _context10.next = 2;\n        return takeLatest(ADD_COMMENT_REQUEST, addComment);\n      case 2:\n      case \"end\":\n        return _context10.stop();\n    }\n  }, _marked10);\n}\nfunction watchRemoveComment() {\n  return _regeneratorRuntime().wrap(function watchRemoveComment$(_context11) {\n    while (1) switch (_context11.prev = _context11.next) {\n      case 0:\n        _context11.next = 2;\n        return takeLatest(REMOVE_COMMENT_REQUEST, removeComment);\n      case 2:\n      case \"end\":\n        return _context11.stop();\n    }\n  }, _marked11);\n}\nexport default function postSaga() {\n  return _regeneratorRuntime().wrap(function postSaga$(_context12) {\n    while (1) switch (_context12.prev = _context12.next) {\n      case 0:\n        _context12.next = 2;\n        return all([fork(watchLoadPost), fork(watchAddPost), fork(watchLikePost), fork(watchUnlikePost), fork(watchRemovePost), fork(watchAddComment), fork(watchRemoveComment)]);\n      case 2:\n      case \"end\":\n        return _context12.stop();\n    }\n  }, _marked12);\n}","map":{"version":3,"names":["loadPosts","addPost","removePost","addComment","removeComment","watchLoadPost","watchAddPost","watchLikePost","watchRemovePost","watchAddComment","watchRemoveComment","postSaga","all","fork","takeLatest","call","put","delay","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","getDummyPosts","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","postMyDummyPost","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","postMyDummyComment","REMOVE_COMMENT_REQUEST","REMOVE_COMMENT_SUCCESS","REMOVE_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","axios","shortId","loadPostsAPI","data","post","action","type","console","error","response","addPostAPI","id","generate","removePostAPI","addCommentAPI","postId","removeCommentAPI","watchUnlikePost"],"sources":["/Users/home/Desktop/new-projects/client-nextproject/sagas/post.js"],"sourcesContent":["import { all, fork, takeLatest, call, put, delay } from 'redux-saga/effects';\nimport {\n  LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, getDummyPosts,\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, postMyDummyPost,\n  LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, postMyDummyComment,\n  REMOVE_COMMENT_REQUEST, REMOVE_COMMENT_SUCCESS, REMOVE_COMMENT_FAILURE\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from 'axios';\nimport shortId from 'shortid';\n\nfunction loadPostsAPI(data) {\n  return axios.post(`/api/posts/`, data);\n}\n\nfunction* loadPosts(action) {\n  // const result = yield call(loadPostsAPI, action.data);\n  yield delay(1000);\n  try{\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: getDummyPosts(10)\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\n\nfunction* addPost(action) {\n  // const result = yield call(addPostAPI, action.data);\n  yield delay(1000);\n  try{\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: postMyDummyPost(action, id)\n    })\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\n\nfunction* removePost(action) {\n  // const result = yield call(removePostAPI, action.data);\n  yield delay(1000);\n  try{\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    })\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment/`, data);\n}\n\nfunction* addComment(action) {\n  // const result = yield call(addCommentAPI, action.data);\n  yield delay(1000);\n  try{\n    const id = shortId.generate();\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: postMyDummyComment(action, id)\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction removeCommentAPI(data) {\n  return axios.post(`/api/post/${data.id}`, data);\n}\n\nfunction* removeComment(action) {\n  // const result = yield call(removeCommentAPI, action.data);\n  yield delay(1000);\n  try{\n    yield put({\n      type: REMOVE_COMMENT_SUCCESS,\n      data: action.data\n    })\n  }\n  catch(err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_COMMENT_FAILURE,\n      error: err.response.data,\n    })\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts)\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, addPost)\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost)\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment)\n}\n\nfunction* watchRemoveComment() {\n  yield takeLatest(REMOVE_COMMENT_REQUEST, removeComment)\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLoadPost),\n    fork(watchAddPost),\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n    fork(watchRemoveComment),\n  ])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}