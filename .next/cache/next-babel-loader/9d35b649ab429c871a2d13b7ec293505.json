{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/new-projects/client-nextproject/pages/_app.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Head from \"next/head\";\nimport wrapper from '../store';\nconst App = ({\n  Component\n}) => {\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, \"NodeBird\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://fonts.googleapis.com/css?family=Public+Sans&display=swap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://fonts.googleapis.com/icon?family=Material+Icons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }), __jsx(\"link\", {\n    rel: \"shortcut icon\",\n    href: \"/favicon.ico\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  })), __jsx(Component, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }));\n};\nexport default wrapper.withRedux(App); // (configureStore가 들어있는)HOC로 감싸주기. \n// 고차 컴포넌트는 컴포넌트를 새로운 컴포넌트로 변환합니다.\n// 그냥 컴포넌트는 props를 UI로 변환합니다.(이해 못함. 근데 상관없음)","map":{"version":3,"names":["Head","wrapper","App","Component","withRedux"],"sources":["/Users/home/Desktop/new-projects/client-nextproject/pages/_app.tsx"],"sourcesContent":["import type { NextPage } from 'next';\nimport { ElementType } from 'react';\nimport Head from \"next/head\";\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport wrapper from '../store';\n\ninterface AppProps {\n  Component: ElementType\n}\nconst App: NextPage<AppProps> = ({ Component }) => {\n  return (\n    <>\n      <Head>\n        <title>NodeBird</title>\n        <link\n            rel=\"stylesheet\"\n            href=\"https://fonts.googleapis.com/css?family=Public+Sans&display=swap\"\n        />\n        <link\n            rel=\"stylesheet\"\n            href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n        />\n        <link rel=\"shortcut icon\" href=\"/favicon.ico\" />\n      </Head>\n      <Component />\n    </>\n  );\n};\n\nexport default wrapper.withRedux(App); // (configureStore가 들어있는)HOC로 감싸주기. \n// 고차 컴포넌트는 컴포넌트를 새로운 컴포넌트로 변환합니다.\n// 그냥 컴포넌트는 props를 UI로 변환합니다.(이해 못함. 근데 상관없음)\n"],"mappings":";;;AAEA,OAAOA,IAAI,MAAM,WAAW;AAI5B,OAAOC,OAAO,MAAM,UAAU;AAK9B,MAAMC,GAAuB,GAAG,CAAC;EAAEC;AAAU,CAAC,KAAK;EACjD,OACE,4BACE,MAAC,IAAI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACH;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,cAAuB,EACvB;IACI,GAAG,EAAC,YAAY;IAChB,IAAI,EAAC,kEAAkE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACzE,EACF;IACI,GAAG,EAAC,YAAY;IAChB,IAAI,EAAC,yDAAyD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAChE,EACF;IAAM,GAAG,EAAC,eAAe;IAAC,IAAI,EAAC,cAAc;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CAC3C,EACP,MAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CACZ;AAEP,CAAC;AAED,eAAeF,OAAO,CAACG,SAAS,CAACF,GAAG,CAAC,CAAC,CAAC;AACvC;AACA"},"metadata":{},"sourceType":"module"}