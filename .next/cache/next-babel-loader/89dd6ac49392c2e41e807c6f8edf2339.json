{"ast":null,"code":"var __jsx = React.createElement;\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { retweet, undoRetweet } from \"../store/thunks/post\";\nimport React from \"react\";\nimport { StyledMenu } from \"../styles\";\nimport { MenuItem } from \"@mui/material\";\nimport RepeatIcon from '@mui/icons-material/Repeat';\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport ListItemDecorator from \"@mui/joy/ListItemDecorator\";\nimport { LoadingButton } from \"@mui/lab\";\nconst RetweetMenu = ({\n  post,\n  anchorEl,\n  setAnchorEl,\n  open\n}) => {\n  const {\n    mainPosts,\n    retweetLoading,\n    undoRetweetLoading\n  } = useSelector(state => state.post);\n  const {\n    my\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const isRetweetedByMe = post.RetweetId && post.UserId == (my === null || my === void 0 ? void 0 : my.id) || mainPosts.find(mainPost => post.id == mainPost.RetweetId && mainPost.UserId == (my === null || my === void 0 ? void 0 : my.id));\n  const isRetweetedByOthers = post.RetweetId && post.UserId == (my === null || my === void 0 ? void 0 : my.id) || mainPosts.find(mainPost => post.id == mainPost.RetweetId && mainPost.UserId != (my === null || my === void 0 ? void 0 : my.id));\n  const isOriginalPost = mainPosts.find(mainPost => post.id == mainPost.RetweetId && mainPost.UserId);\n  const retweetingPostId = isOriginalPost === null || isOriginalPost === void 0 ? void 0 : isOriginalPost.id; // the id of the post which is retweeting the original one.\n\n  const handleRetweet = post => {\n    if (my === null) return alert('로그인이 필요합니다.');\n    if (isRetweetedByMe) {\n      dispatch(undoRetweet({\n        id: isOriginalPost ? retweetingPostId : post.id\n      }));\n    } else if (isRetweetedByOthers) {\n      dispatch(retweet({\n        id: isOriginalPost ? post.id : post.RetweetId\n      }));\n    } else {\n      dispatch(retweet({\n        id: post.id\n      }));\n    }\n  };\n  return __jsx(StyledMenu, {\n    id: \"demo-customized-menu\",\n    MenuListProps: {\n      'aria-labelledby': 'demo-customized-button'\n    },\n    anchorEl: anchorEl,\n    open: open,\n    onClose: handleClose\n  }, __jsx(MenuItem, {\n    key: isRetweetedByMe ? \"Undo Retweet\" : \"Retweet\",\n    onClick: () => handleRetweet(post),\n    disableRipple: true\n  }, __jsx(LoadingButton, {\n    loading: isRetweetedByMe ? undoRetweetLoading : retweetLoading,\n    sx: {\n      p: 0,\n      color: \"inherit\",\n      textTransform: \"inherit\",\n      fontSize: \"inherit\"\n    }\n  }, __jsx(ListItemDecorator, {\n    sx: {\n      color: 'inherit'\n    }\n  }, __jsx(RepeatIcon, null)), ' ', isRetweetedByMe ? \"Undo Retweet\" : \"Retweet\")), __jsx(MenuItem, {\n    key: \"Quote Tweet\",\n    onClick: handleClose,\n    disableRipple: true\n  }, __jsx(EditIcon, null), \"Quote Tweet\"));\n};\nexport default RetweetMenu;","map":null,"metadata":{},"sourceType":"module"}