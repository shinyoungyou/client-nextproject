{"ast":null,"code":"var __jsx = React.createElement;\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editComment, removeComment } from \"../store/thunks/post\";\nimport React, { useState, useEffect } from \"react\";\nimport MoreMenu from './MoreMenu';\nimport { EditContent } from '../styles/styled-components';\nimport { Avatar, Divider, IconButton, ListItem, ListItemAvatar, ListItemText, Tooltip } from \"@mui/material\";\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\nconst CommentListItem = ({\n  comment\n}) => {\n  const {\n    editCommentDone,\n    editCommentLoading,\n    removeCommentLoading\n  } = useSelector(state => state.post);\n  const {\n    my\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const {\n    0: editStatus,\n    1: setEditStatus\n  } = useState(\"beforeEdit\");\n  const {\n    0: content,\n    1: setContent\n  } = useState(comment.content);\n  const {\n    0: anchorEl,\n    1: setAnchorEl\n  } = useState(null);\n  const open = Boolean(anchorEl);\n  useEffect(() => {\n    if (editCommentDone) {\n      setEditStatus(\"beforeEdit\");\n    }\n  }, [editCommentDone]);\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleContentChange = e => {\n    setContent(e.target.value);\n  };\n  const handleEditComment = comment => {\n    if (editStatus === \"beforeEdit\") {\n      setEditStatus(\"editing\");\n    } else if (editStatus === \"editing\") {\n      dispatch(editComment({\n        postId: comment.PostId,\n        id: comment.id,\n        content\n      }));\n      setEditStatus(\"pending\");\n    }\n  };\n  const handleDeleteComment = comment => {\n    dispatch(removeComment({\n      postId: comment.PostId,\n      id: comment.id\n    }));\n  };\n  return __jsx(React.Fragment, null, __jsx(ListItem, {\n    key: comment.id,\n    secondaryAction: my !== null && __jsx(React.Fragment, null, __jsx(Tooltip, {\n      title: \"More\"\n    }, __jsx(IconButton, {\n      \"aria-label\": \"more\",\n      id: \"long-button\",\n      \"aria-controls\": open ? 'long-menu' : undefined,\n      \"aria-expanded\": open ? 'true' : undefined,\n      \"aria-haspopup\": \"true\",\n      onClick: handleClick\n    }, __jsx(MoreVertIcon, null))), __jsx(MoreMenu, {\n      item: comment,\n      anchorEl: anchorEl,\n      setAnchorEl: setAnchorEl,\n      open: open,\n      editStatus: editStatus,\n      setEditStatus: setEditStatus,\n      handleEdit: () => handleEditComment(comment),\n      editLoading: editCommentLoading,\n      handleDelete: () => handleDeleteComment(comment),\n      removeLoading: removeCommentLoading\n    })),\n    alignItems: \"flex-start\"\n  }, __jsx(ListItemAvatar, null, __jsx(Avatar, {\n    alt: comment.User.username,\n    src: \"/static/images/avatar/1.jpg\"\n  })), __jsx(ListItemText, {\n    sx: {\n      m: 1\n    },\n    primary: comment.User.username,\n    secondary: editStatus === \"editing\" ? __jsx(EditContent, {\n      onChange: handleContentChange\n    }, content) : comment.content\n  })), __jsx(Divider, {\n    variant: \"inset\",\n    component: \"li\"\n  }));\n};\nexport default CommentListItem;","map":null,"metadata":{},"sourceType":"module"}