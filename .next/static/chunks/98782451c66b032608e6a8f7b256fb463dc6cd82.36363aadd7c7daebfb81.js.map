{"version":3,"sources":["webpack://_N_E/./store/thunks/post.ts"],"names":["i","loadPosts","createAsyncThunk","payload","thunkAPI","instance","get","lastId","response","fulfillWithValue","data","rejectWithValue","loadPostsByUser","id","loadSinglePost","uploadImages","post","addPost","dispatch","addPostToMe","editPost","patch","removePost","removePostToMe","addComment","postId","editComment","removeComment","likePost","unlikePost","retweet","undoRetweet"],"mappings":"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","file":"static/chunks/98782451c66b032608e6a8f7b256fb463dc6cd82.36363aadd7c7daebfb81.js","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport instance from '.';\nimport { addPostToMe, removePostToMe } from \"../reducers/user\";\nimport { Post, ImagePath } from \"../state-types/post\";\nimport { User } from \"../state-types/user\";\nimport { getDummyPosts, postMyDummyPost, postMyDummyComment } from '../reducers/post';\n\nimport shortId from 'shortid';\n\nconst pause = (duration: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, duration);\n  });\n};\n\nexport const loadPosts = createAsyncThunk('post/loadPosts', async (payload: { lastId?: number }, thunkAPI) => {\n  try {\n    const response = await instance.get(`posts?lastId=${payload?.lastId || 0}`);\n    // await pause(1000);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n    // return thunkAPI.fulfillWithValue(getDummyPosts(10)); // pass to extraReducer\n  } catch (error: any) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const loadPostsByUser = createAsyncThunk('post/loadPostsByUser', async (payload: { id: number, lastId?: number }, thunkAPI) => {\n  try {\n    const response = await instance.get(`user/${payload.id}/posts?lastId=${payload?.lastId || 0}`);\n    // await pause(1000);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n    // return thunkAPI.fulfillWithValue(getDummyPosts(10)); // pass to extraReducer\n  } catch (error: any) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const loadSinglePost = createAsyncThunk('post/loadSinglePost', async (payload: { id: number }, thunkAPI) => {\n  try {\n    const response = await instance.get(`post/${payload.id}`);\n    // await pause(1000);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n    // return thunkAPI.fulfillWithValue(getDummyPosts(10)); // pass to extraReducer\n  } catch (error: any) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const uploadImages = createAsyncThunk('post/uploadImages', async (payload: FormData, thunkAPI) => {\n  try {\n    const response = await instance.post(`post/images/`, payload);\n    // await pause(1000);\n    // const id = shortId.generate();\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n    // return thunkAPI.fulfillWithValue(postMyDummyComment(payload, id)); // pass to extraReducer\n  } catch (error: any) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const addPost = createAsyncThunk('post/addPost', async (payload: { content: string, images?: ImagePath[] }, thunkAPI) => {\n  try {\n    const response = await instance.post('post/', payload);\n    // await pause(1000);\n    // const id = shortId.generate();\n    thunkAPI.dispatch(addPostToMe(response.data.id));\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n    // return thunkAPI.fulfillWithValue(postMyDummyPost(payload, id)); // pass to extraReducer\n  } catch (error: any) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const editPost = createAsyncThunk('post/editPost', async (payload: { id: number, content: string }, thunkAPI) => {\n  try {\n    const response = await instance.patch(`post/${payload.id}`, payload);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error: any) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const removePost = createAsyncThunk('post/removePost', async (payload: Post, thunkAPI) => {\n  try {\n    const response = await instance.delete(`post/${payload.id}`);\n    // await pause(1000);\n    thunkAPI.dispatch(removePostToMe(response.data));\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n    // return thunkAPI.fulfillWithValue(payload); // pass to extraReducer\n  } catch (error: any) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const addComment = createAsyncThunk('post/addComment', async (payload: { content: string, postId: number, userId: number, User: User }, thunkAPI) => {\n  try {\n    const response = await instance.post(`post/${payload.postId}/comment/`, payload);\n    // await pause(1000);\n    // const id = shortId.generate();\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n    // return thunkAPI.fulfillWithValue(postMyDummyComment(payload, id)); // pass to extraReducer\n  } catch (error: any) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const editComment = createAsyncThunk('post/editComment', async (payload: { postId: number, id: number, content: string }, thunkAPI) => {\n  try {\n    const response = await instance.patch(`post/${payload.postId}/comment/${payload.id}`, payload);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error: any) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const removeComment = createAsyncThunk('post/removeComment', async (payload: { postId: number, id: number }, thunkAPI) => {\n  try {\n    const response = await instance.delete(`post/${payload.postId}/comment/${payload.id}`);\n    // await pause(1000);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error: any) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const likePost = createAsyncThunk('post/likePost', async (payload: { postId: number }, thunkAPI) => {\n  try {\n    const response = await instance.post(`post/${payload.postId}/like`);\n    // await pause(1000);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error: any) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const unlikePost = createAsyncThunk('post/unlikePost', async (payload: { postId: number }, thunkAPI) => {\n  try {\n    const response = await instance.delete(`post/${payload.postId}/like`);\n    // await pause(1000);\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n  } catch (error: any) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const retweet = createAsyncThunk('post/retweet', async (payload: { id: number }, thunkAPI) => {\n  try {\n    const response = await instance.post(`post/${payload.id}/retweet`, payload);\n    // await pause(1000);\n    // const id = shortId.generate();\n    thunkAPI.dispatch(addPostToMe(response.data.id));\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n    // return thunkAPI.fulfillWithValue(postMyDummyPost(payload, id)); // pass to extraReducer\n  } catch (error: any) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\nexport const undoRetweet = createAsyncThunk('post/undoRetweet', async (payload: { id: number }, thunkAPI) => {\n  try {\n    const response = await instance.delete(`post/${payload.id}/retweet`);\n    // await pause(1000);\n    thunkAPI.dispatch(removePostToMe(response.data));\n    return thunkAPI.fulfillWithValue(response.data); // pass to extraReducer\n    // return thunkAPI.fulfillWithValue(payload); // pass to extraReducer\n  } catch (error: any) {\n    return thunkAPI.rejectWithValue(error.response.data); // pass to extraReducer\n  }\n})\n\n\n\n"],"sourceRoot":""}